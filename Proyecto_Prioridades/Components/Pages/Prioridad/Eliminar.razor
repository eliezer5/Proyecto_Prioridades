@page "/prioridad/Eliminar/{PrioridadId:int}"
@inject PrioridadesService _prioridadesBLL

@rendermode InteractiveServer
<h3>Detalles de Prioridad</h3>
<EditForm Model="_prioridad">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3>Eliminar Prioridad.</h3>
            </div>
            <div class=card-body>

               

                @*Descripción*@
                <div class="mb-3">
                    <label class="form-label" for="Descripción">Descripción:</label>
                    <InputText @bind-Value="_prioridad.Descripción" class="form-control" />
                    <ValidationMessage For="@(() => _prioridad.Descripción)" />
                </div>
                <p class="text-danger">@_mensaje</p>

                @*Dias compromiso*@
                <div class="mb-3">
                    <label class="form-label" for="SolicitadoPor">Dias compromiso:</label>
                    <InputNumber @bind-Value="_prioridad.DiasCompromiso" class="form-control" />
                    <ValidationMessage For="@(() => _prioridad.DiasCompromiso)" />
                </div>
            </div>
            <div class="card-footer d-flex justify-content-between">
                <div class="btn">
                    <a href="/ConsultaPrioridad" class="bi bi-arrow-return-left btn btn-outline-primary">Volver</a>
                </div>
                <div class="btn align-self-center">
                    <button type="button" class="bi bi-x-circle-fill btn btn-outline-danger" @onclick="Eliminar1">Eliminar <i class="oi oi-trash" /></button>
                </div> 
                <div>
                </div>
            </div>

        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int PrioridadId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Obtener los detalles de la prioridad utilizando el PrioridadId
         _prioridad = await _prioridadesBLL.FindByIdAsync(PrioridadId);
       
    }

    public Prioridades _prioridad = new Prioridades();
    public string _mensaje = string.Empty;
    public string _mensaje2 = string.Empty;
    public string _mensaje3 = string.Empty;
    public async Task Eliminar1()
    {
        var eliminado = await _prioridadesBLL.Delete(_prioridad.PrioridadId);
        if (eliminado)
        {
            _mensaje = "Prioridad eliminada con exito.";

        }

    }
}